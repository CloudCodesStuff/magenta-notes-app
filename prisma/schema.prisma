generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  workspaces        Workspace[]
  Collaborators     Collaborators[]
  starredWorkspaces StarredWorkspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collaborators {
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  addedAt     DateTime  @default(now())

  @@id([workspaceId, userId])
}

model Workspace {
  id             String             @id @default(cuid())
  name           String
  description    String?
  notes          Note[]
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  collaborators  Collaborators[]
  starredByUsers StarredWorkspace[]

  @@index([id])
}

model Note {
  id          String    @id @default(cuid())
  color       String?
  title       String
  content     Json
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([id])
}

model StarredWorkspace {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  starredAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
